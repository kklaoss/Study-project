#include <iostream> // Подключение библиотеки для ввода-вывода
using namespace std; // Использование пространства имен std

void №1() // Определение функции №1
{
	int a, b; // Объявление переменных a и b
	cout << "Введите значения для переменных a и b:\n\n"; // Вывод сообщения для пользователя
	cout << "a = "; cin >> a; // Ввод значения для переменной a
	cout << "b = "; cin >> b; // Ввод значения для переменной b
	int* pa = &a; // Объявление указателя pa и его инициализация адресом переменной a
	int* pb = &b; // Объявление указателя pb и его инициализация адресом переменной b
	if (*pa > *pb) // Проверка, если значение по указателю pa больше значения по указателю pb
	{
		*pa *= 5; // Умножение значения по указателю pa на 5
		*pb -= 5; // Уменьшение значения по указателю pb на 5
	}
	if (*pa < *pb) // Проверка, если значение по указателю pa меньше значения по указателю pb
	{
		*pa -= 5; // Уменьшение значения по указателю pa на 5
		*pb *= 5; // Умножение значения по указателю pb на 5
	}
	if (*pa == *pb) // Проверка, если значения по указателям pa и pb равны
	{
		cout << "\n(!): Переменные должны быть разные по значению\n"; // Вывод сообщения об ошибке
		return; // Выход из функции
	}
	cout << "\nИзмененные по условию данного задания переменные а и b:\n\n"; // Вывод сообщения для пользователя
	cout << "a = " << a << endl; // Вывод значения переменной a
	cout << "b = " << b << endl; // Вывод значения переменной b
}

void №2() // Определение функции №2
{
	char* pc; // Объявление указателя на тип char
	pc = new char; // Выделение памяти под один символ типа char
	*pc = 'H'; // Присваивание значения 'H' выделенной ячейке памяти
	cout << "\nЗначение в выделенной ячейке: " << *pc << "\n"; // Вывод значения, хранящегося в выделенной ячейке памяти
	delete pc; // Освобождение выделенной памяти
}

int count_positives(int* arr, int size) // Функция для подсчета положительных элементов в массиве
{
	int count = 0; // Инициализация счетчика положительных элементов
	for (int i = 0; i < size; ++i) // Цикл по всем элементам массива
	{
		if (arr[i] > 0) // Проверка, является ли текущий элемент положительным
		{
			++count; // Увеличение счетчика, если элемент положительный
		}
	}
	return count; // Возврат количества положительных элементов
}
void №3() // Определение функции №3
{
	int n; // Объявление переменной для хранения размера массивов
	cout << "Введите размер массивов: "; // Вывод запроса на ввод размера массивов
	cin >> n; // Ввод размера массивов
	int* p = new int[n]; // Динамическое выделение памяти для массива p
	int* q = new int[n]; // Динамическое выделение памяти для массива q
	cout << "\nЗаполните массив p:"; // Вывод запроса на заполнение массива p
	cout << "\nВведите " << n << " элементов массива:\n"; // Вывод количества элементов для ввода
	for (int i = 0; i < n; ++i) // Цикл для ввода элементов массива p
	{
		cin >> p[i]; // Ввод элемента массива p
	}
	cout << "\nЗаполните массив q:"; // Вывод запроса на заполнение массива q
	cout << "\nВведите " << n << " элементов массива:\n"; // Вывод количества элементов для ввода
	for (int i = 0; i < n; ++i) // Цикл для ввода элементов массива q
	{
		cin >> q[i]; // Ввод элемента массива q
	}
	int p_count = count_positives(p, n); // Подсчет положительных элементов в массиве p
	int q_count = count_positives(q, n); // Подсчет положительных элементов в массиве q
	cout << "\nМассив p: "; // Вывод массива p
	for (int i = 0; i < n; ++i) // Цикл для вывода элементов массива p
	{
		cout << p[i] << " "; // Вывод элемента массива p
	}
	cout << endl; // Переход на новую строку
	cout << "Массив q: "; // Вывод массива q
	for (int i = 0; i < n; ++i) // Цикл для вывода элементов массива q
	{
		cout << q[i] << " "; // Вывод элемента массива q
	}
	cout << endl; // Переход на новую строку
	cout << "\nПоложительных элементов в массиве p: " << p_count << endl; // Вывод количества положительных элементов в массиве p
	cout << "Положительных элементов в массиве q: " << q_count << endl; // Вывод количества положительных элементов в массиве q
	if (p_count > q_count) // Проверка, больше ли положительных элементов в массиве p
	{
		cout << "\nВ массиве p больше положительных элементов\n"; // Вывод сообщения, если в массиве p больше положительных элементов
	}
	if (q_count > p_count) // Проверка, больше ли положительных элементов в массиве q
	{
		cout << "\nВ массиве q больше положительных элементов\n"; // Вывод сообщения, если в массиве q больше положительных элементов
	}
	if (q_count == p_count) // Проверка, равно ли количество положительных элементов в обоих массивах
	{
		cout << "\nКоличество положительных элементов в обоих массивах одинаково\n"; // Вывод сообщения, если количество положительных элементов в обоих массивах одинаково
	}
	delete[] p; // Освобождение памяти, выделенной для массива p
	delete[] q; // Освобождение памяти, выделенной для массива q
}

void sort_arrays(int* arr, int size) // Функция для сортировки массива
{
	for (int i = 0; i < size - 1; ++i) // Внешний цикл для прохода по всем элементам массива
	{
		for (int j = 0; j < size - i - 1; ++j) // Внутренний цикл для сравнения элементов и их перестановки
		{
			if (arr[j] > arr[j + 1]) // Если текущий элемент больше следующего, меняем их местами
			{
				int temp = arr[j]; // Временная переменная для хранения текущего элемента
				arr[j] = arr[j + 1]; // Меняем текущий элемент на следующий
				arr[j + 1] = temp; // Меняем следующий элемент на временный
			}
		}
	}
}
void №4() // Определение функции №4
{
	int n; // Переменная для хранения размера массива
	cout << "Введите размер массива a: "; // Вывод сообщения для ввода размера массива
	cin >> n; // Ввод размера массива
	int* a = new int[n]; // Создание динамического массива a размером n
	cout << "\nВведите " << n << " элементов массива:\n"; // Вывод сообщения для ввода элементов массива
	for (int i = 0; i < n; ++i)
	{
		cin >> a[i]; // Ввод элементов массива a
	}
	int* b = new int[n]; // Создание динамического массива b размером n
	int b_size = 0; // Переменная для хранения текущего размера массива b
	for (int i = 0; i < n; ++i)
	{
		if (a[i] > 0) // Если элемент массива a положительный
		{
			b[b_size++] = a[i] / 3; // Добавление элемента, деленного на 3, в массив b
		}
	}
	sort_arrays(b, b_size); // Сортировка массива b
	cout << "\nМассив a: "; // Вывод сообщения для отображения массива a
	for (int i = 0; i < n; ++i)
	{
		cout << a[i] << " "; // Вывод элементов массива a
	}
	cout << endl; // Переход на новую строку
	cout << "\nМассив b (положительные элементы a, деленные на 3, отсортированные): "; // Вывод сообщения для отображения массива b
	for (int i = 0; i < b_size; ++i)
	{
		cout << b[i] << " "; // Вывод элементов массива b
	}
	cout << endl; // Переход на новую строку
	delete[] a; // Освобождение памяти, выделенной под массив a
	delete[] b; // Освобождение памяти, выделенной под массив b
}

int main() // Главная функция программы
{
	setlocale(LC_ALL, "rus"); // Установка локали для корректного отображения русского языка
	№4(); // Вызов функции №4
	return 0; // Возврат 0, указывающий на успешное завершение программы
}