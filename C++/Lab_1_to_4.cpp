#include <iostream> // Объявление библиотеки для использования потоков ввода-вывода
#include <math.h> // Подключаем математическую библиотеку для использования математических функций
#include <cmath> // Объявление библиотеки для выполнения математических операций
using namespace std; // Подключение пространства имён std
void f1_1()
{
	int S, a, result; // Вводим пременные
	cin >> S; // Вводим число, факториал которого хотим найти
	result = 1; // Присваиваем начальное значение переменной result
	for (a = 1; a <= S; a = a + 1) // Начало цикла вычисления факториала.
		// В начале мы вводим счетчик, который будет увеличиваться на 1 до тех пор, пока не станет равен значению переменной S
	{
		result = result * a; // Переменная result каждый раз умножается на увеличивающийся счетчик а
	}
	cout << fixed << result; // Выводим переменную result. Используем fixed для отображения числа с плавающей запятой в экспоненциальном представлении
}
void f1_2()
{
	cout << "  _" << " " << "     _" << " " << "     _" << endl; // Выводим символы с новой строки
	cout << ">(.)__" << " " << "<(.)__" << " " << "=(.)__" << endl; // Выводим символы с новой строки 
	cout << " (___/" << " " << " (___/" << " " << " (___/" << endl; // Выводим символы с новой строки
}
void f1_3()
{
	cout << 1023456789876543201; // Выводим наименьшее натуральное число, которое содержит в десятичной записи все цифры от 0 до 9, делится на 9 и являетсяпалиндромом
}
void f1_4()
{
	int l = 10; // Вводим переменную l, которая указывает длину слова, в данном случае 10
	int s = 3; // Вводим переменную s, которая указывает количество доступных букв, то есть 3
	int res; // Вводим переменную res, которая указывает количество слов
	// В данном случае, каждая позиция в слове может быть занята одной из трёх букв. Таким образом, каждое слово длиной 10 можно представить как последовательность из 10 символов, где каждый символ может быть a, b или c
  // Количество таких слов можно найти, используя формулу (3 ** 10), так как у нас 3 варианта на каждую из 10 позиций
	res = pow(s, l); // Функция pow возводит 3 в степень 10, чтобы получить общее количество возможных слов
	cout << fixed << res; // Выводим переменную res. Используем fixed для отображения числа с плавающей запятой в экспоненциальном представлении
}
void f1_5()
{
	int a, b; // Вводим переменные а и b
	a = 1 + 1; // Присваиваем значение переменной a
	b = 1 + 1; // Присваиваем значение переменной b
	cout << a << " + " << b << " = " << "4"; // Выводим строку "2 + 2 = 4"
}
void f1_idz(float c)
{
	float PI = 3.14159265, S, b, a; // Объявление константы PI и переменных S, b, a
	b = c * cos(PI / 3); // Вычисление длины стороны b треугольника, используя косинус угла 60 градусов (PI/3)
	a = c * sin(PI / 3); // Вычисление длины стороны a треугольника, используя синус угла 60 градусов (PI/3)
	S = a * b; // Вычисление площади S треугольника, используя формулу S = a * b
	cout << S; // Вывод площади S на экран
}

void f2_1(float X, float Y, float Z)
{
	if (X == 0) cout << " " << endl << "Serial number of a zero: " << 1;
	// Проверка, равно ли значение X нулю
	// Если X равно 0, выводим сообщение с серийным номером 1
	if (Y == 0) cout << " " << endl << "Serial number of a zero: " << 2;
	// Проверка, равно ли значение Y нулю
	// Если Y равно 0, выводим сообщение с серийным номером 2
	if (Z == 0) cout << " " << endl << "Serial number of a zero: " << 3;
	// Проверка, равно ли значение Z нулю
	// Если Z равно 0, выводим сообщение с серийным номером 3
}
void f2_2(float K, float L, float N)
{
	if (K > L && K > N) cout << " " << endl << "Serial number of the largest number: " << 1 << endl;
	// Проверка, является ли K наибольшим числом среди K, L и N
	// Если да, выводим, что это первое число
	if (L > K && L > N) cout << " " << endl << "Serial number of the largest number: " << 2 << endl;
	// Проверка, является ли L наибольшим числом среди K, L и N
	// Если да, выводим, что это второе число
	if (N > K && N > L) cout << " " << endl << "Serial number of the largest number: " << 3 << endl;
	// Проверка, является ли N наибольшим числом среди K, L и N
	// Если да, выводим, что это третье число
	if (K < L && K < N) cout << " " << endl << "Serial number of the smallest number: " << 1;
	// Проверка, является ли K наименьшим числом среди K, L и N
	// Если да, выводим, что это первое число
	if (L < K && L < N) cout << " " << endl << "Serial number of the smallest number: " << 2;
	// Проверка, является ли L наименьшим числом среди K, L и N
	// Если да, выводим, что это второе число
	if (N < K && N < L) cout << " " << endl << "Serial number of the smallest number: " << 3;
	// Проверка, является ли N наименьшим числом среди K, L и N
	// Если да, выводим, что это третье число
}
void f2_3(float Y, float Z)
{
	float y, z; // Объявление двух дополнительных переменных с плавающей точкой y и z для хранения преобразованных значений
	if (Y > Z) { y = (Y + Z) / 2; z = 2 * Y * Z; cout << " " << endl << "The converted larger number: " << y << endl << "The converted smaller number: " << z; }
	// Проверка, является ли Y больше Z
	// Если да, вычисляем значение полусуммы Y и Z и сохраняем его в y
	// Вычисляем удвоенное произведение Y и Z и сохраняем его в z
	// Выводим преобразованное большее число (y)
	// Выводим преобразованное меньшее число (z)
	else { y = 2 * Y * Z; z = (Y + Z) / 2; cout << " " << endl << "The converted smaller number: " << y << endl << "The converted larger number: " << z; }
	// Если Y не больше Z (то есть Z больше или равно Y)
	// Вычисляем удвоенное произведение Y и Z и сохраняем его в y
	// Вычисляем значение полусуммы Y и Z и сохраняем его в z
	// Выводим преобразованное меньшее число (y)
	// Выводим преобразованное большее число (z)
}
void f2_4(float X, float Y, float Z)
{
	int a = 0, b = 0; // Инициализация счетчиков: a для положительных чисел и b для отрицательных
	if (X > 0) { a++; } // Если X положительное, увеличиваем счетчик a
	else { b++; } // Если X неположительное (отрицательное или ноль), увеличиваем счетчик b
	if (Y > 0) { a++; } // Если Y положительное, увеличиваем счетчик a
	else { b++; } // Если Y неположительное, увеличиваем счетчик b
	if (Z > 0) { a++; } // Если Z положительное, увеличиваем счетчик a
	else { b++; } // Если Z неположительное, увеличиваем счетчик b
	cout << " " << endl << "The number of positive numbers: " << a << endl << "The number of negative numbers: " << b;
	// Выводим количество положительных и отрицательных чисел
}
void f2_5(float A, float B, float C)
{
	if (B > A) { A = B; } // Если B больше A, присваиваем A значение B
	if (C > A) { A = C; } // Если C больше A, присваиваем A значение C
	if (A < B) { B = A; } // Если A меньше B, присваиваем B значение A (теперь B - наименьшее)
	if (C < B) { B = C; } // Если C меньше B, присваиваем B значение C (теперь B - наименьшее)
	cout << " " << endl << "Difference of the largest and smallest number: " << A - B;
	// Выводим разницу между наибольшим и наименьшим числом
}
void f2_6(float K, float M, float N)
{
	float b; // Объявление временной переменной b
	if (K > M) { b = K; K = M; M = b; } // Если K больше M, меняем их местами
	if (K > N) { b = K; K = N; N = b; } // Если K больше N, меняем их местами
	if (M > N) { b = M; M = N; N = b; } // Если M больше N, меняем их местами
	cout << " " << endl << "K < M < N" << endl << " " << endl;
	// Выводим строку с указанием порядка K, M и N
	cout << "K = " << K << endl << "M = " << M << endl << "N = " << N;
	// Выводим значения K, M и N
}
void f2_7(float X, float Y, float Z)
{
	int B, b; // Объявление двух переменных B и b для хранения двух наибольших значений
	if (X > Y) { // Проверяем, больше ли X, чем Y
		if (X > Z) { // Если X больше Z
			B = X; // Присваиваем B значение X
			if (Y > Z) { b = Y; } // Если Y больше Z, присваиваем b значение Y
			else { b = Z; } // В противном случае присваиваем b значение Z
		}
		else { B = Z; b = X; } // Если X не больше Z
		// Присваиваем B значение Z
		// Присваиваем b значение X
	}
	else { // Если X не больше Y
		if (Y > Z) { // Проверяем, больше ли Y, чем Z
			B = Y; // Присваиваем B значение Y
			if (X > Z) { b = X; } // Если X больше Z, присваиваем b значение X
			else { b = Z; } // В противном случае присваиваем b значение Z
		}
		else { B = Z; b = Y; } // Если Y не больше Z
		// Присваиваем B значение Z
		// Присваиваем b значение Y
	}
	cout << " " << endl << "Two largest numbers: " << B << " " << b;
	// Выводим два наибольших числа B и b
}
void f2_8(float L, float M, float N)
{
	if (L < M) { // Проверяем, меньше ли L, чем M
		if (L < N) { L = (M + N) / 2; }
		// Если L меньше N
		// Присваиваем L значение полусуммы M и N
		else { N = (L + M) / 2; }
		// Если L не меньше N
		// Присваиваем N значение полусуммы L и M
	}
	else { // Если L не меньше M
		if (M < N) { M = (L + N) / 2; }
		// Проверяем, меньше ли M, чем N
		// Присваиваем M значение полусуммы L и N
		else { N = (L + M) / 2; }
		// Если M не меньше N
		// Присваиваем N значение полусуммы L и M
	}
	cout << " " << endl << "L = " << L << endl << "M = " << M << endl << "N = " << N;
	// Выводим значения L, M и N
}
void f2_9(float A, float B, float C, float D)
{
	float a = A; // Инициализация переменной a значением A
	if (B > a) { a = B; } // Если B больше текущего значения a, обновляем a на значение B
	if (C > a) { a = C; } // Если C больше текущего значения a, обновляем a на значение C
	if (D > a) { a = D; } // Если D больше текущего значения a, обновляем a на значение D
	cout << " " << endl; // Печатаем пустую строку для разделения вывода
	cout << "A / greatest number = " << A / a << endl; // Выводим результат деления A на наибольшее число
	cout << "B / greatest number = " << B / a << endl; // Выводим результат деления B на наибольшее число
	cout << "C / greatest number = " << C / a << endl; // Выводим результат деления C на наибольшее число
	cout << "D / greatest number = " << D / a; // Выводим результат деления D на наибольшее число
}
void f2_10(float A, float B, float C, float D)
{
	float a; // Объявление пяти целочисленных переменных A, B, C, D и временной переменной a
	if (A < B) { a = A; A = B; B = a; } // Если A меньше B, меняем их местами
	if (A < C) { a = A; A = C; C = a; } // Если A меньше C, меняем их местами
	if (A < D) { a = A; A = D; D = a; } // Если A меньше D, меняем их местами
	if (B < C) { a = B; B = C; C = a; } // Если B меньше C, меняем их местами
	if (B < D) { a = B; B = D; D = a; } // Если B меньше D, меняем их местами
	if (C < D) { a = C; C = D; D = a; } // Если C меньше D, меняем их местами
	cout << " " << endl << "A > B > C > D" << endl << " " << endl;
	// Выводим строку с указанием порядка A, B, C и D
	cout << "A = " << A << endl; // Выводим значение A
	cout << "B = " << B << endl; // Выводим значение B
	cout << "C = " << C << endl; // Выводим значение C
	cout << "D = " << D; // Выводим значение D
}
void f2_idz1(float x1, float x2, float y1, float y2)
{
	cout << " " << endl << "The coordinates of the first cell: " << x1 << " ; " << y1 << endl; // Координат первой клетки
	cout << " " << endl; // Печатаем пустую строку для разделения ввода
	cout << "The coordinates of the second cell: " << x2 << " ; " << y2 << endl;  // Координат второй клетки
	if ((abs(x1 - x2) == 2 && abs(y1 - y2) == 1) || (abs(x1 - x2) == 1 && abs(y1 - y2) == 2)) { cout << " " << endl << "YES" << endl; }
	// Проверка, могут ли две клетки быть достигнуты ходом коня в шахматах
	// Если клетки могут быть достигнуты, выводим "YES"
	else { cout << " " << endl << "NO" << endl; }
	// Если клетки не могут быть достигнуты, выводим "NO"
}
void f2_idz2(int num)
{
	cout << " " << endl << "The serial number of the day in the year: " << num << endl;
	// Запрос у пользователя ввода порядкового номера дня в году
	int day; // Объявление целочисленной переменной day для хранения дня недели
	day = (num - 1) % 7;
	// Вычисление дня недели, используя остаток от деления на 7
	// (num - 1) используется, чтобы сделать 1-й день года равным 0 (понедельник)
	switch (day) // Используем switch для определения дня недели
	{
	case 0: cout << "This Monday" << endl; break; // Если day равно 0, выводим "Это понедельник"
	case 1: cout << "This Tuesday" << endl; break;  // Если day равно 1, выводим "Это вторник"
	case 2: cout << "This Wednesday" << endl; break; // Если day равно 2, выводим "Это среда"
	case 3: cout << "This Thursday" << endl; break; // Если day равно 3, выводим "Это четверг"
	case 4: cout << "This Friday" << endl; break; // Если day равно 4, выводим "Это пятница"
	case 5: cout << "This Saturday" << endl; break; // Если day равно 5, выводим "Это суббота"
	case 6: cout << "This Sunday" << endl; break; // Если day равно 6, выводим "Это воскресенье"
	default: cout << "Incorrect day number. Please enter a number from 1 to 365" << endl;
		// Если введен некорректный номер дня, выводим сообщение об ошибке
	}
}

void f3_1(int n)
{
	int a, b; // Объявление двух дополнительных переменных
	for (a = 1; a <= n; ++a) { // Цикл от 1 до n для формирования ступенек
		for (b = 1; b <= a; ++b) { // Вложенный цикл для вывода чисел от 1 до a
			cout << b; // Выводим текущее число b без пробелов
		}
		cout << endl; // Переход на новую строку после вывода каждой ступеньки
	}
}
void f3_2(float a, float b, float n)
{
	// Проверяем, что n больше 0 и a меньше b; если нет, выводим сообщение об ошибке и выходим из функции
	if (n <= 0 || a >= b) {
		cout << "\nError: Make sure that n > 0 and a < b" << endl; // Сообщение об ошибке
		return; // Завершаем выполнение функции
	}

	double step = (b - a) / (n - 1); // Вычисляем шаг для интервала[a, b] на основе n

	cout << "\n(t)\t(Y)" << endl; // Выводим заголовки для таблицы значений

	for (int i = 0; i < n; ++i) { // Цикл для вычисления и вывода значений Y для каждого t в интервале
		double t = a + i * step; // Вычисляем текущее значение t
		double Y = 4 * exp(-0.5 * t) * cos(t); // Вычисляем значение Y по заданной формуле
		cout << t << "\t" << Y << endl; // Выводим значения t и Y в формате таблицы
	}
}
void f3_3()
{
	int num; // Переменная для хранения текущего числа
	int m1 = 0, m2 = 0; // Переменные для хранения первого и второго по величине чисел
	cout << "\nEnter a sequence of natural numbers (0 to complete):" << endl; // Запрашиваем ввод последовательности натуральных чисел
	while (true) // Бесконечный цикл для ввода чисел
	{
		cin >> num; // Считываем число
		if (num == 0) break; // Проверяем, является ли число 0 и выходим из цикла, если введено 0
		if (num > m1) { // Проверяем, является ли текущее число больше наибольшего
			m2 = m1; // Предыдущее максимальное становится вторым
			m1 = num; // Обновляем наибольшее число
		}
		else if (num > m2 && num != m2) { // Проверяем, меньше ли число m1 и больше m2
			m2 = num; // Обновляем второе наибольшее число
		}
	}
	if (m2 == 0) { // Проверяем, было ли введено хотя бы одно натуральное число
		if (m1 == 0) { // Если первое по величине число равно 0, значит, ничего не было введено
			cout << "\nNo natural numbers have been entered"; // Сообщение об отсутствии введенных чисел
		}
		else { // Если первое по величине число не равно 0, значит, введено только одно число
			cout << "\nThere is no second largest element"; // Сообщение о том, что нет второго по величине числа
		}
	}
	else { // Если второе по величине число было найдено
		cout << "\nThe second largest element: " << m2; // Выводим второе по величине число
	}
}

double sum(int n)
{
	double sum = 0.0; // Объявление локальной переменной sum для хранения суммы, и инициализация ее нулем
	int i; // Объявление переменной цикла i
	for (i = 1; i <= n; i++) // Цикл от 1 до n, который вычисляет сумму значений
		sum += 3.0 / (i * i - i + 1); // Увеличиваем sum на 1.0 / (i * i + 2 * i + 1) на каждой итерации
	return sum; // Возврат суммы после завершения цикла
}
void f4_11(int n)
{
	cout << "\nThe sum of the first " << n << " terms of the numerical series : " << sum(n) << endl; // Выводим значение функции sum(n) на экран с новой строки
}
double form(int n)
{
	double sign = 1.0 - 2.0 * (n % 2); // Определяем знак: 1 для четных n, -1 для нечетных n.
	return sign * n / (n * n * n - n + 1); // Возвращаем значение члена ряда по формуле.
}
double sum1(int n)
{
	double sum = 0.0; // Инициализируем переменную sum для хранения суммы.
	for (int i = 1; i <= n; ++i) // Цикл от 1 до n для суммирования членов ряда.
	{
		sum += form(i); // Добавляем i-й член ряда к сумме.
	}
	return sum; // Возвращаем итоговую сумму.
}
double sum2(double eps)
{
	double sum = 0.0; // Инициализируем переменную sum для хранения суммы.
	double term; // Объявляем переменную term для хранения текущего члена ряда.
	int n = 1; // Инициализируем n как 1 для начала вычислений.
	term = form(n); // Вычисляем первый член ряда.
	while (fabs(term) >= eps) // Цикл продолжается, пока абсолютное значение текущего члена больше или равно eps.
	{
		sum += term; // Добавляем текущий член к сумме.
		n++; // Увеличиваем n для перехода к следующему члену ряда.
		term = form(n); // Вычисляем следующий член ряда.
	}
	return sum; // Возвращаем итоговую сумму.
}
void f4_12(int n, double eps)
{
	cout << "\nThe sum of the first " << n << " members of the series: " << sum1(n);
	// Выводим сумму первых n членов ряда
	cout << "\nThe amount accurate to " << eps << ": " << sum2(eps) << endl;
	// Выводим сумму с точностью, заданной параметром eps
}
double getC(int n)
{
	double c = 1.0; // Инициализируем коэффициент значением 1.0
	int sign = (n % 2 == 0) * 1 + (n % 2 != 0) * -1; // Определяем знак: 1 для четных n, -1 для нечетных
	for (int i = 2; i < n; ++i) // Цикл для вычисления (n - 1)!
	{
		c *= i; // Умножаем коэффициент на i для вычисления факториала
	}
	c = sign * (n + 1) / c; // Вычисляем окончательный коэффициент
	return c; // Возвращаем вычисленный коэффициент
}
double sum3(double x, int n)
{
	double sum = 0.0; // Инициализируем сумму значением 0.0
	double term = 1.0; // Начальное значение для x^0, равное 1
	for (int i = 1; i <= n; ++i) // Цикл для вычисления суммы первых n членов
	{
		term *= x; // Умножаем на x для получения следующего члена ряда
		double c = getC(i); // Получаем коэффициент для текущего члена
		sum += c * term; // Добавляем текущий член к сумме
	}
	return sum; // Возвращаем итоговую сумму
}
double sum4(double x, double eps)
{
	double sum = 0.0; // Инициализируем сумму значением 0.0
	double term = 1.0; // Начальное значение для x^0, равное 1
	double pSum = -1.0; // Инициализация предыдущей суммы для входа в цикл
	int i = 1; // Счетчик для членов ряда
	while ((sum - pSum >= eps) + (sum - pSum <= -eps)) // Цикл продолжается, пока разница между текущей и предыдущей суммой больше eps
	{
		pSum = sum; // Сохраняем текущее значение суммы как предыдущую
		term *= x; // Умножаем на x для получения следующего члена ряда
		double c = getC(i); // Получаем коэффициент для текущего члена
		sum += c * term; // Добавляем текущий член к сумме
		++i; // Увеличиваем счетчик
	}
	return sum; // Возвращаем итоговую сумму
}
void f4_13(double x, int n, double eps)
{
	cout << "\nThe sum of the first " << n << " members of the series: " << sum3(x, n);
	// Выводим сумму первых n членов ряда
	cout << "\nThe amount accurate to " << eps << ": " << sum4(x, eps) << endl;
	// Выводим сумму с точностью, заданной параметром eps
}
double count(int num)
{
	int count = 0; // Инициализируем переменную для подсчета количества цифр
	while (num != 0) // Цикл продолжается, пока num не станет равным 0
	{
		num /= 10; // Удаляем последнюю цифру из num, деля на 10
		count++; // Увеличиваем счетчик на 1 за каждую удаленную цифру
	}
	return count; // Возвращаем общее количество цифр
}
void f4_211()
{
	int P; // Объявляем переменную для хранения максимального количества цифр
	cout << "Enter the maximum number of digits (P): "; // Запрашиваем у пользователя ввод
	cin >> P; // Считываем максимальное количество цифр от пользователя
	int num; // Объявляем переменную для хранения текущего числа, введенного пользователем
	int sum = 0; // Инициализируем переменную для накопления суммы допустимых чисел
	cout << "Enter a sequence of non-zero integers (0 to complete): " << endl; // Запрашиваем у пользователя последовательность целых чисел
	while (true) // Начинаем бесконечный цикл для считывания чисел
	{
		cin >> num; // Считываем следующее число от пользователя
		if (num == 0) { break; } // Выходим из цикла, если пользователь вводит 0
		// Проверяем, является ли число нечетным и имеет ли оно количество цифр меньше или равно P
		if (num % 2 != 0 && count(num) <= P) { sum += num; } // Добавляем допустимое число к сумме
	}
	// Выводим общую сумму нечетных чисел, соответствующих критериям
	cout << "\nThe sum of odd numbers with a maximum number of digits " << P << ": " << sum << endl;
}
double summa(int num)
{
	int sum = 0; // Инициализируем переменную sum значением 0
	while (num != 0) // Цикл продолжается, пока num не станет равным 0
	{
		sum += num % 10; // Добавляем последнюю цифру num к sum
		num /= 10; // Удаляем последнюю цифру из num
	}
	return sum; // Возвращаем общую сумму цифр
}
void f4_212()
{
	int num; // Объявляем переменную для хранения пользовательского ввода
	int Tsum = 0; // Инициализируем общую сумму (Tsum) значением 0
	cout << "Enter a sequence of non-zero integers (0 to complete the input): " << endl; // Запрашиваем ввод от пользователя
	while (true) // Начинаем бесконечный цикл для чтения пользовательского ввода
	{
		cin >> num; // Считываем целое число из ввода
		if (num == 0) { break; } // Если введено 0, выходим из цикла
		int Dsum = summa(num); // Вычисляем сумму цифр числа num
		// Проверяем, что Dsum не равна 0 и что num делится на Dsum
		if (Dsum != 0 && num % Dsum == 0) { Tsum += num; } // Если условие истинно, добавляем num к общей сумме (Tsum)
	}
	// Выводим общую сумму элементов, которые делятся на сумму своих цифр
	cout << "\nThe sum of the elements divided by the sum of their digits: " << Tsum << endl;
}
bool symmetric(int num)
{
	int orig = num; // Сохраняем оригинальное число для последующего сравнения
	int rev = 0; // Инициализируем переменную для хранения перевернутого числа
	while (num > 0) // Цикл продолжается, пока число больше 0
	{
		rev = rev * 10 + num % 10; // Добавляем последнюю цифру num к rev
		num /= 10; // Удаляем последнюю цифру из num
	}
	return orig == rev; // Проверяем, равно ли оригинальное число перевернутому
}
void f4_22()
{
	int n; // Объявляем переменную для хранения количества вводимых чисел
	cout << "Enter the number of numbers: "; // Запрашиваем у пользователя ввод
	cin >> n; // Считываем количество вводимых чисел от пользователя
	int maxs = 0, maxns = 0; // Инициализируем счетчики для максимальных последовательностей симметричных и несимметричных чисел
	int cs = 0, cns = 0; // Инициализируем счетчики для текущих симметричных и несимметричных последовательностей
	for (int i = 0; i < n; ++i) // Цикл по количеству вводимых чисел
	{
		int num; // Объявляем переменную для хранения текущего числа
		cout << "Enter a number " << (i + 1) << ": "; // Запрашиваем у пользователя ввести число
		cin >> num; // Считываем число от пользователя
		if (symmetric(num)) // Проверяем, является ли текущее число симметричным
		{
			cs++; // Увеличиваем счетчик симметричных чисел
			maxs = max(maxs, cs); // Обновляем максимальное количество симметричных чисел, если текущий больше
			cns = 0; // Сбрасываем счетчик несимметричных чисел, так как мы нашли симметричное число
		}
		else // Если число не симметричное
		{
			cns++; // Увеличиваем счетчик несимметричных чисел
			maxns = max(maxns, cns); // Обновляем максимальное количество несимметричных чисел, если текущий больше
			cs = 0; // Сбрасываем счетчик симметричных чисел, так как мы нашли несимметричное число
		}
	}
	cout << "\nThe maximum number of symmetric numbers in a row: " << maxs << endl;
	// Выводим максимальное количество симметричных чисел
	cout << "\nThe maximum number of non-symmetric numbers in a row: " << maxns << endl;
	// Выводим максимальное количество несимметричных чисел
}

int main() // Начало основной функции программы
{
	float a, b, c, d; // Объявление переменных для хранения значений
	cout << "Enter the variables:" << endl << " " << endl;  // Вывод сообщения для пользователя
	cout << "Variable 1 - "; cin >> a; // Запрос ввода первой переменной
	cout << "Variable 2 - "; cin >> b; // Запрос ввода второй переменной
	cout << "Variable 3 - "; cin >> c; // Запрос ввода третьей переменной
	cout << "Variable 4 - "; cin >> d; // Запрос ввода четвертой переменной
	int nomer; // Объявление переменной для хранения номера задачи
	cout << " " << endl << "Specify the task number: "; cin >> nomer; // Запрос ввода номера задачи от пользователя
	switch (nomer) // Использование оператора switch для выбора задачи по номеру
	{
	case 12: f1_2(); break; // Если введён номер 12, вызывается функция f1_2
	case 13: f1_3(); break; // Если введён номер 13, вызывается функция f1_3
	case 11: f1_1(); break; // Если введён номер 11, вызывается функция f1_1
	case 14: f1_4(); break; // Если введён номер 14, вызывается функция f1_4
	case 15: f1_5(); break; // Если введён номер 15, вызывается функция f1_5
	case 16: f1_idz(a); break; // Если введён номер 16, вызывается функция f1_idz с переменной a
	case 21: f2_1(a, b, c); break; // Если введён номер 21, вызывается функция f2_1 с переменными a, b, c
	case 22: f2_2(a, b, c); break; // Если введён номер 22, вызывается функция f2_2 с переменными a, b, c
	case 23: f2_3(a, b); break; // Если введён номер 23, вызывается функция f2_3 с переменными a, b
	case 24: f2_4(a, b, c); break; // Если введён номер 24, вызывается функция f2_4 с переменными a, b, c
	case 25: f2_5(a, b, c); break; // Если введён номер 25, вызывается функция f2_5 с переменными a, b, c
	case 26: f2_6(a, b, c); break; // Если введён номер 26, вызывается функция f2_6 с переменными a, b, c
	case 27: f2_7(a, b, c); break; // Если введён номер 27, вызывается функция f2_7 с переменными a, b, c
	case 28: f2_8(a, b, c); break; // Если введён номер 28, вызывается функция f2_8 с переменными a, b, c
	case 29: f2_9(a, b, c, d); break; // Если введён номер 29, вызывается функция f2_9 с переменными a, b, c, d
	case 210: f2_10(a, b, c, d); break; // Если введён номер 210, вызывается функция f2_10 с переменными a, b, c, d
	case 211: f2_idz1(a, b, c, d); break; // Если введён номер 211, вызывается функция f2_idz1 с переменными a, b, c, d
	case 212: f2_idz2(a); break; // Если введён номер 212, вызывается функция f2_idz2 с переменной a
	case 31: f3_1(a); break; // Если введён номер 31, вызывается функция f3_1 с переменной a
	case 32: f3_2(a, b, c); break; // Если введён номер 32, вызывается функция f3_2 с переменной a, b, c
	case 33: f3_3(); break; // Если введён номер 33, вызывается функция f3_3 без переменных
	case 411: f4_11(a); break; // Если введён номер 411, вызывается функция f4_11 с переменной a
	case 412: f4_12(a, b); break; // Если введён номер 412, вызывается функция f4_12 с переменной a, b
	case 413: f4_13(a, b, c); break; // Если введён номер 413, вызывается функция f4_12 с переменной a, b, c
	case 4211: f4_211(); break; // Если введён номер 4211, вызывается функция f4_211 без переменных
	case 4212: f4_212(); break; // Если введён номер 4212, вызывается функция f4_212 без переменных
	case 422: f4_22(); break; // Если введён номер 422, вызывается функция f4_22 без переменных
	default: cout << "The task was not found";
		// Если введён номер, который не соответствует ни одной задаче, выводится сообщение об ошибке
	}
	return 0; // Возврат 0
}